#ifndef __IOSTREAM_HPP__
#define __IOSTREAM_HPP__

#include <module/module.hpp>

namespace OS {

class OutStreamModule : public Module {
public:
  static void InitGlobal();
  static OutStreamModule & GetGlobal();

  OutStreamModule() {}

protected:
  virtual void Initialize();
  virtual DepList GetDependencies();
};

class OutStream {
public:
  virtual OutStream & operator<<(const char * str);
  virtual OutStream & operator<<(int number);
  virtual OutStream & operator<<(long number);
  virtual OutStream & operator<<(long long number);
  virtual OutStream & operator<<(unsigned int number);
  virtual OutStream & operator<<(unsigned long number);
  virtual OutStream & operator<<(unsigned long long number);
};

class OutStreamErr : public OutStream {
public:
  typedef OutStream super;

  virtual OutStream & operator<<(const char * str);

  virtual OutStream & operator<<(int number) {
    return super::operator<<(number);
  }

  virtual OutStream & operator<<(unsigned int number) {
    return super::operator<<(number);
  }

  virtual OutStream & operator<<(long number) {
    return super::operator<<(number);
  }

  virtual OutStream & operator<<(unsigned long number) {
    return super::operator<<(number);
  }

  virtual OutStream & operator<<(long long number) {
    return super::operator<<(number);
  }

  virtual OutStream & operator<<(unsigned long long number) {
    return super::operator<<(number);
  }
};

class OutStreamOut : public OutStream {
public:
  typedef OutStream super;

  virtual OutStream & operator<<(const char * str);

  virtual OutStream & operator<<(int number) {
    return super::operator<<(number);
  }

  virtual OutStream & operator<<(unsigned int number) {
    return super::operator<<(number);
  }

  virtual OutStream & operator<<(long number) {
    return super::operator<<(number);
  }

  virtual OutStream & operator<<(unsigned long number) {
    return super::operator<<(number);
  }

  virtual OutStream & operator<<(long long number) {
    return super::operator<<(number);
  }

  virtual OutStream & operator<<(unsigned long long number) {
    return super::operator<<(number);
  }
};

extern OutStreamOut cout;
extern OutStreamErr cerr;
extern const char * endl;

}

#endif
